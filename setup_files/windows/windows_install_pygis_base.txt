@echo off
setlocal enabledelayedexpansion
chcp 65001 >nul 2>&1

echo.
echo ============================================================
echo      PYGIS BASE ENVIRONMENT INSTALLER
echo ============================================================
echo.

set LOGFILE=pygis_installation.log
set ERRORLOG=pygis_errors.log
set ERROR_COUNT=0

echo Starting installation at %date% %time%
echo Log file: %LOGFILE%
echo Error log: %ERRORLOG%
echo.

REM Clear previous logs
echo Installation started at %date% %time% > %LOGFILE%
echo Error summary > %ERRORLOG%

REM ============================================================
REM Find conda installation
REM ============================================================
echo [1/20] Searching for conda installation...
set CONDA_EXE=
set MAMBA_EXE=

if exist "%USERPROFILE%\miniforge3\Scripts\conda.exe" (
    set CONDA_EXE=%USERPROFILE%\miniforge3\Scripts\conda.exe
    if exist "%USERPROFILE%\miniforge3\Scripts\mamba.exe" set MAMBA_EXE=%USERPROFILE%\miniforge3\Scripts\mamba.exe
)
if exist "%USERPROFILE%\miniconda3\Scripts\conda.exe" (
    set CONDA_EXE=%USERPROFILE%\miniconda3\Scripts\conda.exe
    if exist "%USERPROFILE%\miniconda3\Scripts\mamba.exe" set MAMBA_EXE=%USERPROFILE%\miniconda3\Scripts\mamba.exe
)
if exist "C:\miniforge3\Scripts\conda.exe" (
    set CONDA_EXE=C:\miniforge3\Scripts\conda.exe
    if exist "C:\miniforge3\Scripts\mamba.exe" set MAMBA_EXE=C:\miniforge3\Scripts\mamba.exe
)
if exist "C:\miniconda3\Scripts\conda.exe" (
    set CONDA_EXE=C:\miniconda3\Scripts\conda.exe
    if exist "C:\miniconda3\Scripts\mamba.exe" set MAMBA_EXE=C:\miniconda3\Scripts\mamba.exe
)

if "%CONDA_EXE%"=="" (
    echo ERROR: Could not find conda installation!
    echo Please install miniforge first
    pause
    exit /b 1
)

if defined MAMBA_EXE (
    set INSTALLER=%MAMBA_EXE%
    echo Found mamba - using for faster installation
) else (
    set INSTALLER=%CONDA_EXE%
    echo Found conda - using for installation
)

echo Found: %INSTALLER% >> %LOGFILE%

REM ============================================================
REM Remove existing environment
REM ============================================================
echo [2/20] Cleaning up existing environment...
"%INSTALLER%" env remove -n pygis_base -y >nul 2>&1
echo Environment cleanup completed

REM ============================================================
REM Create base environment
REM ============================================================
echo [3/20] Creating pygis_base environment...
"%INSTALLER%" create -n pygis_base python=3.10 -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo ERROR: Failed to create base environment
    echo CRITICAL: Base environment creation failed >> %ERRORLOG%
    pause
    exit /b 1
)
echo Done: Base environment created

REM ============================================================
REM Install packages step by step
REM ============================================================

echo [4/20] Installing core geospatial libraries...
"%INSTALLER%" install -n pygis_base gdal proj geos libspatialindex fiona shapely pyproj -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo WARNING: Core geospatial install had errors
    echo FAILED: Core geospatial >> %ERRORLOG%
    set /a ERROR_COUNT+=1
) else (
    echo Done: Core geospatial libraries
)

echo [5/20] Installing scientific computing...
"%INSTALLER%" install -n pygis_base numpy pandas scipy matplotlib seaborn scikit-learn -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo WARNING: Scientific computing install had errors
    echo FAILED: Scientific computing >> %ERRORLOG%
    set /a ERROR_COUNT+=1
) else (
    echo Done: Scientific computing stack
)

echo [6/20] Installing GeoPandas and Rasterio...
"%INSTALLER%" install -n pygis_base geopandas rasterio -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo WARNING: GeoPandas/Rasterio install had errors
    echo FAILED: GeoPandas Rasterio >> %ERRORLOG%
    set /a ERROR_COUNT+=1
) else (
    echo Done: GeoPandas and Rasterio
)

echo [7/20] Installing data format libraries...
"%INSTALLER%" install -n pygis_base xarray netcdf4 h5py h5netcdf zarr -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo WARNING: Data format libraries had errors
    echo FAILED: Data formats >> %ERRORLOG%
    set /a ERROR_COUNT+=1
) else (
    echo Done: Data format libraries
)

echo [8/20] Installing Jupyter ecosystem...
"%INSTALLER%" install -n pygis_base jupyter jupyterlab ipywidgets -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo WARNING: Jupyter install had errors
    echo FAILED: Jupyter >> %ERRORLOG%
    set /a ERROR_COUNT+=1
) else (
    echo Done: Jupyter ecosystem
)

echo [9/20] Installing visualization packages...
"%INSTALLER%" install -n pygis_base plotly bokeh folium contextily mapclassify -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo WARNING: Visualization packages had errors
    echo FAILED: Visualization >> %ERRORLOG%
    set /a ERROR_COUNT+=1
) else (
    echo Done: Visualization packages
)

echo [10/20] Installing geospatial analysis tools...
"%INSTALLER%" install -n pygis_base osmnx earthpy geoplot -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo WARNING: Geospatial analysis tools had errors
    echo FAILED: Geospatial analysis >> %ERRORLOG%
    set /a ERROR_COUNT+=1
) else (
    echo Done: Geospatial analysis tools
)

echo [11/20] Installing image processing...
"%INSTALLER%" install -n pygis_base scikit-image imageio-ffmpeg tifffile -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo WARNING: Image processing had errors
    echo FAILED: Image processing >> %ERRORLOG%
    set /a ERROR_COUNT+=1
) else (
    echo Done: Image processing
)

echo [12/20] Installing web mapping dependencies...
"%INSTALLER%" install -n pygis_base localtileserver rio-cogeo rioxarray -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo WARNING: Web mapping dependencies had errors
    echo FAILED: Web mapping deps >> %ERRORLOG%
    set /a ERROR_COUNT+=1
) else (
    echo Done: Web mapping dependencies
)

echo [13/20] Installing interactive mapping...
"%INSTALLER%" install -n pygis_base ipyleaflet owslib -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo WARNING: Interactive mapping had errors
    echo FAILED: Interactive mapping >> %ERRORLOG%
    set /a ERROR_COUNT+=1
) else (
    echo Done: Interactive mapping
)

echo [14/20] Installing geemap and leafmap...
"%INSTALLER%" install -n pygis_base geemap leafmap -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo WARNING: geemap/leafmap install had errors
    echo FAILED: geemap leafmap >> %ERRORLOG%
    set /a ERROR_COUNT+=1
) else (
    echo Done: geemap and leafmap
)

echo [15/20] Installing optional packages (census, pykrige)...
"%INSTALLER%" install -n pygis_base census us pykrige palettable geojson -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo INFO: Some optional packages failed - continuing
    echo OPTIONAL FAILED: census pykrige >> %ERRORLOG%
) else (
    echo Done: Optional packages
)

echo [16/20] Installing cloud tools (optional)...
"%INSTALLER%" install -n pygis_base pystac stackstac planetary-computer -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo INFO: Cloud tools failed - continuing
    echo OPTIONAL FAILED: cloud tools >> %ERRORLOG%
) else (
    echo Done: Cloud tools
)

echo [17/20] Installing pygis meta-package...
"%INSTALLER%" install -n pygis_base pygis -c conda-forge -y >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo Conda failed, trying pip for pygis...
    "%INSTALLER%" run -n pygis_base pip install pygis >> %LOGFILE% 2>&1
    if !errorlevel! neq 0 (
        echo INFO: pygis meta-package failed - continuing
        echo OPTIONAL FAILED: pygis >> %ERRORLOG%
    ) else (
        echo Done: pygis meta-package via pip
    )
) else (
    echo Done: pygis meta-package
)

echo [18/20] Installing Earth Engine API...
"%INSTALLER%" run -n pygis_base pip install earthengine-api >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo INFO: Earth Engine API failed - continuing
    echo OPTIONAL FAILED: earthengine-api >> %ERRORLOG%
) else (
    echo Done: Earth Engine API
)

echo [19/20] Installing additional pip packages...
"%INSTALLER%" run -n pygis_base pip install sklearn_xarray geeaddons sankee >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo INFO: Some additional packages failed - continuing
    echo OPTIONAL FAILED: additional pip packages >> %ERRORLOG%
) else (
    echo Done: Additional pip packages
)

echo [20/20] Installing advanced optional packages...
"%INSTALLER%" run -n pygis_base pip install overturemaps whiteboxgui >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo INFO: Advanced packages failed - continuing
    echo OPTIONAL FAILED: advanced packages >> %ERRORLOG%
) else (
    echo Done: Advanced packages
)

REM ============================================================
REM Verification
REM ============================================================
echo.
echo Verifying core packages...
"%INSTALLER%" run -n pygis_base python -c "import numpy, pandas, geopandas, rasterio, matplotlib; print('Core packages OK')" >> %LOGFILE% 2>&1
if !errorlevel! neq 0 (
    echo WARNING: Core package verification failed
    echo VERIFY FAILED: Core packages >> %ERRORLOG%
    set /a ERROR_COUNT+=1
) else (
    echo Verification: Core packages working
)

REM ============================================================
REM Final Report
REM ============================================================
echo.
echo ============================================================
echo                   INSTALLATION COMPLETE
echo ============================================================
echo Installation finished at %date% %time%
echo.

if %ERROR_COUNT% equ 0 (
    echo SUCCESS: All packages installed successfully!
    echo.
    echo NEXT STEPS:
    echo 1. Open miniforge prompt
    echo 2. Type: conda activate pygis_base
    echo 3. Type: jupyter lab
    echo.
    echo Your PyGIS environment is ready!
) else (
    echo PARTIAL SUCCESS: Installation completed with %ERROR_COUNT% errors
    echo.
    echo Most core functionality should still work.
    echo Check %ERRORLOG% for failed packages.
    echo.
    echo NEXT STEPS:
    echo 1. Open miniforge prompt
    echo 2. Type: conda activate pygis_base
    echo 3. Try manually installing failed packages if needed
    echo 4. Type: jupyter lab
    echo.
    echo FAILED PACKAGES - check error log:
    if exist %ERRORLOG% type %ERRORLOG%
)

echo.
echo CORE INSTALLED PACKAGES:
echo - Python 3.10 environment
echo - GeoPandas for vector data
echo - Rasterio for raster data  
echo - NumPy, Pandas for data science
echo - Matplotlib for plotting
echo - Jupyter Lab for notebooks
echo - Folium, Contextily for web maps
echo - And many more geospatial tools
echo.
echo Installation logs saved to: %LOGFILE%
echo.
pause